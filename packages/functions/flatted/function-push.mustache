const path = require('path')
const fs = require('fs')
const CBEGIN = '\x1b[32m'
const CERROR = '\x1b[31m'
const CRESET = '\x1b[0m'
const CDONE='\x1b[37m'
var nodeArgs = process.argv.slice(2);
const opName = `${CBEGIN}Simplify::${CRESET}Function`
const simplify = require('simplify-sdk')
const provider = require('simplify-sdk/provider')
var configInputFile = process.env.FUNCTION_INPUT || "function-input.json"
var configSrcDir = process.env.FUNCTION_SOURCE || "build"
var functionOps = process.env.FUNCTION_OPS || "push"
process.env.ENFORCEMENT_PACKAGE = process.env.ENFORCEMENT_PACKAGE || ""
process.env.DEPLOYMENT_STAGE = process.env.DEPLOYMENT_STAGE || "latest"
while (nodeArgs.length > 1) {
    if (nodeArgs[0] == "--input" || nodeArgs[0] == "-i") {
        configInputFile = nodeArgs[1]
    } else if (nodeArgs[0] == "--src" || nodeArgs[0] == "-s") {
        configSrcDir = nodeArgs[1]
    } else if (nodeArgs[0] == "--ops" || nodeArgs[0] == "-o") {
        functionOps = nodeArgs[1]
    }
    nodeArgs = nodeArgs.slice(2);
}
try {
    var config = simplify.getInputConfig(path.join(__dirname, configInputFile))
    const functionConfig = config.Function
    const bucketName = config.Bucket.Name
    const bucketKey = config.Bucket.Key
    const inputDirectory = path.join(__dirname, configSrcDir)
    const distZippedPath = path.join(__dirname, 'dist')
    const outputFilePath = path.join(distZippedPath, bucketKey)
    provider.setConfig(config).then(function () {
        if (functionOps === 'fetch') {
            simplify.getFunctionMetaInfos({ adaptor: provider.getFunction(), functionConfig}).then(data => {
                let metaOutput = JSON.parse(fs.readFileSync(path.join(__dirname, configInput.OutputFile)))
                fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify({
                    ...metaOutput, ...data
                }, null, 4));
            }).catch(err => console.error(`${opName}-Update: ${CERROR}(ERROR)${CRESET}: ${err}`))
        } else if (functionOps === 'update') {
            simplify.updateFunctionConfiguration({ adaptor: provider.getFunction(), functionConfig}).then(data => {
                let metaOutput = JSON.parse(fs.readFileSync(path.join(__dirname, configInput.OutputFile)))
                fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify({
                    Configuration: { ...metaOutput.Configuration, ...data }
                }, null, 4));
            }).catch(err => console.error(`${opName}-Update: ${CERROR}(ERROR)${CRESET}: ${err}`))
        } else {
            simplify.uploadDirectoryAsZip({
                adaptor: provider.getStorage(), ...{
                    bucketKey, inputDirectory, outputFilePath
                }
            }).then(function (uploadInfor) {
                simplify.createOrUpdateFunction({
                    adaptor: provider.getFunction(),
                    ...{ functionConfig, bucketName, bucketKey: uploadInfor.Key }
                }).then(function (data) {
                    data.Environment.Variables.SHA256_FUNCTION_CODE_HASH = uploadInfor.FileSha256
                    fs.writeFileSync(path.join(__dirname, config.OutputFile), JSON.stringify({
                        Configuration: data
                    }, null, 4));
                }, function (err) {
                    console.error(`${opName}-Update: ${CERROR}(ERROR)${CRESET}: ${err}`);
                })
            }, function (err) {
                console.error(`${opName}-UploadZip: ${CERROR}(ERROR)${CRESET}: ${err}`);
            })
        }
    }).catch(function (err) {
        console.error(`${opName}-UploadDirectory: ${err}`)
    })
} catch (err) {
    console.error(`${opName}-LoadConfig: ${err}`)
}