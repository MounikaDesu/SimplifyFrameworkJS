'use strict';

var utils = require('../utils/writer.js');
var {{serviceModelName}} = null
if (process.env.OVERRIDEN_PACKAGE_LAYER) {
  {{serviceModelName}} = __non_webpack_require__(`${process.env.OVERRIDEN_PACKAGE_LAYER}`).{{serviceModelName}}
} else {
  {{serviceModelName}} = process.env.DEPLOYMENT_STAGE==='stable' ? __non_webpack_require__('{{serviceNamePosix}}').{{serviceModelName}}:require('../{{serviceNamePosix}}').{{serviceModelName}};
}
{{#serviceControl}}
/** ENABLE CIRCUIT BREAKER **/
const Brakes = require('brakes');
/** Declare circuit breaker brakes **/
var {{{operationId}}}CircuitBreakerBrake = null;
{{/serviceControl}}

/**
 {{#summary}}
 * {{{summary}}}
 {{/summary}}
 {{#notes}}
 * {{{notes}}}
 {{/notes}} 
 * curl -X {{httpMethod}} http://localhost:3000{{path}}
{{#allParams}}
 * - {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
 * no response value expected for this operation
{{/returnType}}
{{#returnType}}
 * returns {{{returnType}}}
{{/returnType}}
 **/

module.exports = function (req, res, next) {
  {{#servicePassthrough}}
  {{serviceModelName}}.{{operationId}}(req.sanitizer['context'], {}, function(error, data) {
    error ? utils.writeError(res, error) : utils.writeJson(res, data)
  });
  {{/servicePassthrough}}
  {{^servicePassthrough}}
  {{#allParams}}
  var {{paramName}} = req.sanitizer['{{baseName}}'].value;
  {{/allParams}}
  {{#serviceControl}}
  /** Instanciate circuit breaker guardian **/
  if (!{{{operationId}}}CircuitBreakerBrake) {
    {{{operationId}}}CircuitBreakerBrake = new Brakes({{serviceModelName}}.{{{operationId}}}, {
      name: '{{serviceName}}::{{{operationId}}}',
      group: '{{serviceName}}::{{serviceModelName}}Service',
      timeout: {{serviceTimeout}},
      circuitDuration: {{serviceDuration}},
      threshold: {{serviceThreshold}}
    });
  }
  return {{{operationId}}}CircuitBreakerBrake.exec(req.sanitizer['context']{{#hasParams}}, {{/hasParams}}{{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    .then(function (response) {
      utils.writeJson(res, response);
    }, function (error) {
      utils.writeError(res, error);
    }).catch(function (error) {
      utils.writeError(res, {
        code: 'InnerHandlerThrownException',
        message: error
      });
    });  
  {{/serviceControl}}
  {{^serviceControl}}
  {{serviceModelName}}.{{operationId}}(req.sanitizer['context']{{#hasParams}}, {{/hasParams}}{{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    .then(function (response) {
      utils.writeJson(res, response);
    }, function (error) {
      utils.writeError(res, error);
    })
    .catch(function (error) {
      utils.writeError(res, {
        code: 'InnerHandlerThrownException',
        message: error
      });
    });
  {{/serviceControl}}
  {{/servicePassthrough}}
};